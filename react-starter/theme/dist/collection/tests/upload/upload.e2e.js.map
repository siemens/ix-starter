{"version":3,"file":"upload.e2e.js","sourceRoot":"","sources":["../../../src/tests/upload/upload.e2e.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAE7C,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACrC,cAAc,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACzC,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAChC,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC1C,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEjC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC;QAEtD,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;YACnC,IAAI,KAAU,CAAC;YACf,QAAQ,KAAK,EAAE,CAAC;gBACd,KAAK,CAAC;oBACJ,KAAK,GAAG,SAAS,CAAC;oBAClB,MAAM;gBACR,KAAK,CAAC;oBACJ,KAAK,GAAG,aAAa,CAAC;oBACtB,MAAM;gBACR,KAAK,CAAC;oBACJ,KAAK,GAAG,eAAe,CAAC;oBACxB,MAAM;gBACR,KAAK,CAAC;oBACJ,KAAK,GAAG,kBAAkB,CAAC;oBAC3B,MAAM;gBACR;oBACE,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,OAAO,CAAC,QAAQ,CACpB,CAAC,GAAQ,EAAE,KAAU,EAAE,EAAE;gBACvB,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,CAAC,EACD,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAEF,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { expect } from '@playwright/test';\nimport { regressionTest } from '@utils/test';\n\nregressionTest.describe('upload', () => {\n  regressionTest('basic', async ({ page }) => {\n    await page.goto('upload/basic');\n    await expect(page).toHaveScreenshot();\n  });\n\n  regressionTest('States', async ({ page }) => {\n    await page.goto('upload/states');\n\n    const uploads = await page.locator('ix-upload').all();\n\n    await Promise.all(\n      uploads.map(async (locator, index) => {\n        let state: any;\n        switch (index) {\n          case 0:\n            state = 'LOADING';\n            break;\n          case 1:\n            state = 'SELECT_FILE';\n            break;\n          case 2:\n            state = 'UPLOAD_FAILED';\n            break;\n          case 3:\n            state = 'UPLOAD_SUCCESSED';\n            break;\n          default:\n            console.error('Invalid enum value');\n        }\n\n        await locator.evaluate(\n          (elm: any, state: any) => {\n            elm.state = state;\n          },\n          state\n        );\n      })\n    );\n\n    await expect(page).toHaveScreenshot();\n  });\n});\n"]}