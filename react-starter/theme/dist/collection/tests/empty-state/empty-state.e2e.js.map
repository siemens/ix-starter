{"version":3,"file":"empty-state.e2e.js","sourceRoot":"","sources":["../../../src/tests/empty-state/empty-state.e2e.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAE7C,cAAc,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC1C,cAAc,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACzC,MAAM,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACrC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,cAAc,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC5C,MAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,cAAc,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC3C,MAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACvC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,cAAc,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACjD,MAAM,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC7C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { expect } from '@playwright/test';\nimport { regressionTest } from '@utils/test';\n\nregressionTest.describe('empty state', () => {\n  regressionTest('basic', async ({ page }) => {\n    await page.goto('empty-state/basic');\n    const emptyState = await page.waitForSelector('ix-empty-state');\n    expect(await emptyState.screenshot()).toMatchSnapshot();\n  });\n\n  regressionTest('overflow', async ({ page }) => {\n    await page.goto('empty-state/overflow');\n    const emptyState = await page.waitForSelector('ix-empty-state');\n    expect(await emptyState.screenshot()).toMatchSnapshot();\n  });\n\n  regressionTest('compact', async ({ page }) => {\n    await page.goto('empty-state/compact');\n    const emptyState = await page.waitForSelector('ix-empty-state');\n    expect(await emptyState.screenshot()).toMatchSnapshot();\n  });\n\n  regressionTest('compact break', async ({ page }) => {\n    await page.goto('empty-state/compact-break');\n    const emptyState = await page.waitForSelector('ix-empty-state');\n    expect(await emptyState.screenshot()).toMatchSnapshot();\n  });\n});\n"]}